<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml">

	<binding id="TitledElement">
		<implementation>
			<field name="titleTipPopup">document.getAnonymousNodes(this)[0]</field>
		</implementation>
		
		<handlers>
			<handler event="mouseover">
				if(event.titleTipHandled) return; //only handle once
				this.titleTipPopup.updateContents(this);
				this.titleTipPopup.updatePosition(event);
				this.titleTipPopup.show();
				this._origTitle = this.title;
				this.title = "&#160;"; //prevent native tip on this and parents
				event.titleTipHandled = true;
			</handler>
			
			<handler event="mouseout">
				this.titleTipPopup.hide();
				if(this._origTitle) this.title = this._origTitle;
			</handler>
			
			<handler event="mousemove">
				this.titleTipPopup.updatePosition(event);
			</handler>
		</handlers>
		
		<content>
			<html:span class="title-tip-popup" />
			<children />
		</content>
	</binding>
	
	<binding id="TitleTipPopup">
		<implementation>
			<method name="show">
				<body>
					this.style.display = "block";
				</body>
			</method>
			
			<method name="hide">
				<body>
					this.style.display = "none";
				</body>
			</method>
			
			<method name="updateContents">
				<parameter name="element" />
				<body><![CDATA[
					while(this.firstChild) this.removeChild(this.firstChild);
					
					var title = document.createTextNode(element.title);
					this.appendChild(title);
					
					for(var e = element; e != null; e = e.parentNode) {
						if(e.href) {
							var hrefWrap = document.createElement("span");
							hrefWrap.className = "title-tip-href";
							hrefWrap.appendChild(document.createTextNode(e.href));
							this.appendChild(hrefWrap);
						}
					}
				]]></body>
			</method>
			
			<method name="updatePosition">
				<parameter name="event" />
				<body><![CDATA[
					var thisRef = this;
					function length(prop) {
						return parseFloat(getComputedStyle(thisRef, null).getPropertyValue(prop));
					}
					
					var x = event.clientX + 12;
					var y = event.clientY + 12;
					var w = length("width");
					var h = length("height");
					
					var over;
					if((over = x + w - document.body.clientWidth) > 0) x -= over;
					if((over = y + h - document.body.clientHeight) > 0) y -= over;
					
					this.style.left = x + "px";
					this.style.top  = y + "px";
				]]></body>
			</method>
		</implementation>
		
		<content>
			<html:span class="title-tip-popup-inner">
				<children />
			</html:span>
		</content>
	</binding>
</bindings>
